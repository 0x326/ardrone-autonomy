{"name":"Ardrone-autonomy","tagline":"Provides key building blocks to create autonomous flight applications with the #nodecopter (AR.Drone).","body":"# ardrone-autonomy\r\n\r\nAn autonomous flight library for the ARDrone, built on top of \r\nthe [node-ar-drone](https://github.com/felixge/node-ar-drone) library. \r\nInstead of directly controlling the drone speed, you can use Autonomy \r\nto plan and execute missions by describing the path, altitude and \r\norientation the drone must follow.\r\n\r\nIf you are a #nodecopter enthusiast, then this library will enable you\r\nto focus on higher level use cases and experiments. You focus on where\r\nyou want to go, the library takes your drone there.\r\n\r\nThis work is based on the [Visual Navigation for Flying Robots](http://vision.in.tum.de/teaching/ss2013/visnav2013) course.\r\n\r\n**WARNING:**  This is early work. _Autonomous_ means that this library will move your drone\r\nautomaticaly to reach a given target. There isn't much security in place yet, so if you \r\ndo something wrong, you may have your drone fly away :-)\r\n\r\n**!! Experiment with this library in a closed/controlled environment before going in the wild !!**\r\n\r\n## Features\r\n\r\n* **Extended Kalman Filter** leveraging the onboard tag detection as the observation source\r\nfor an Extended Kalman Filter. This provides much more stable and usable state estimate.\r\n\r\n* **Camera projection and back-projection** to estimate the position of an object detected by the camera.\r\nCurrently used to estimate a tag position in the drone coordinate system based on its detection\r\nby the bottom camera.\r\n\r\n* **PID Controler** to autonomously control the drone position.\r\n\r\n* **Mission planner** to prepare a flight/task plan and then execute it.\r\n\r\n### Planned features\r\n\r\n* **VSLAM** to improve the drone localization estimates.\r\n\r\n* **Object tracking** to detect and track objects in the video stream.\r\n\r\n## Mission\r\n\r\nThis module exposes a high level API to plan and execute missions, by focusing on where\r\nthe drone should go instead of its low-level movements. Here is a simple example, \r\nwith the drone taking off, travelling alongs a 2 x 2 meters square ane then landing.\r\n\r\n```js\r\nvar autonomy = require('ardrone-autonomy');\r\nvar mission  = autonomy.createMission();\r\n\r\nmission.takeoff()\r\n       .zero()       // Sets the current state as the reference\r\n       .altitude(1)  // Climb to altitude = 1 meter\r\n       .forward(2)   \r\n       .right(2)     \r\n       .backward(2) \r\n       .left(2)\r\n       .hover(1000)  // Hover in place for 1 second\r\n       .land();\r\n\r\nmission.run(function (err, result)\r\n    if (err) {\r\n        console.trace(\"Oops, something bad happened: %s\", err.message);\r\n        mission.client().stop();\r\n        mission.client().land();\r\n    } else {\r\n        console.log(\"Mission success!\");\r\n        process.exit(0);\r\n    }\r\n});\r\n```\r\n\r\n### Mission API\r\n\r\n#### mission.log(path)\r\n\r\nLog the mission data, csv formatted, in the given file. Makes it really usefull to\r\ndebug/plot the state and controller behavior.\r\n\r\n#### mission.run(callback)\r\n\r\nExecute the mission. The callback has the form `function(err,result)` and will be triggered in\r\ncase of error or at the end of the mission.\r\n\r\n#### mission.takeoff()\r\n\r\nAdd a takeoff step to the mission.\r\n\r\n#### mission.forward/backward/left/right/up/down(distance)\r\n\r\nAdd a movement step to the mission. The drone will move in the given direction by the distance (in meters) before\r\nproceeding to next step. The drone will also attempt to maintain all other degrees of freedom.\r\n\r\n#### mission.altitude(height)\r\n\r\nAdd a altitude step to the mission. Will climb to the given height before proceeding to next step.\r\n\r\n#### mission.cw/ccw(angle)\r\n\r\nAdd a rotation step to the mission. Will turn by the given angle (in Deg) before proceeding to the next step.\r\n\r\n#### mission.hover(delay)\r\n\r\nAdd a hover step to the mission. Will hover in place for the given delay (in ms) before proceeding to next step.\r\n\r\n#### mission.wait(delay)\r\n\r\nAdd a wait step to the mission. Will wait for the given delay (in ms) before proceeding to next step.\r\n\r\n#### mission.go(position)\r\n\r\nAdd a movement step to the mission. Will go the given position before proceeding to next step. The position is a Controller goal such as {x: 0, y: 0, z: 1, yaw: 90}.\r\n\r\n#### mission.task(function(callback){..})\r\n\r\nAdd a task step to the mission. Will execute the provided function before proceeding to the next step. A callback argument is passed to the function, it should be called when the \r\ntask is done.\r\n\r\n#### mission.taskSync(function)\r\n\r\nAdd a task step to the mission. Will execute the provided function before proceeding to the next step.\r\n\r\n#### mission.zero()\r\n\r\nAdd a zeroing step to the mission. This will set the current position/orientation as \r\nthe base state of the kalman filter (i.e. {x: 0, y:0, yaw:0}). If you are not using\r\na tag as your base position, it is a good idea to zero() after takeoff.\r\n\r\n## Controller API\r\n\r\nThis module exposes a high level API to control the position. It is built using an\r\nExtended Kalman Filter to estimate the position and a PID controller to move the drone\r\nto a given target.\r\n\r\nThe easiest way to try the Controller is to play with the repl provided in the examples:\r\n\r\n```js\r\n$ node examples/repl.js\r\n// Make the drone takeoff\r\ndrone> takeoff()\r\n// Move the drone to position (1,1)\r\ndrone> ctrl.go({x: 1, y:1});\r\n// Climb to altitude 2 meters\r\ndrone> ctrl.altitude(2);\r\n// Spin 90 deg to the right\r\ndrone> ctrl.cw(90);\r\n// Go back to (0,0)\r\ndrone> ctrl.go({x:0, y:0});\r\n// Hover in place\r\ndrone> ctrl.hover();\r\n// Land\r\ndrone> land();\r\n```\r\n\r\n## License\r\n\r\nThe MIT License\r\n\r\nCopyright (c) 2013 by Laurent Eschenauer <laurent@eschenauer.be>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}